// :linkはまだ見てない時、:visitedは1回見た後
.btn {
  &:link,
  &:visited {
    font-size: $default-font-size;
    text-transform: uppercase;
    text-decoration: none;
    /* 
    ・display: blockの場合はいっぱいに要素が広がってしまうのでinline-blockかinlineを使う
    ・inlineの場合は上下のmarginはつけることはできない。また上下のpaddingをつけると他の要素と重なってしまう。
    上記より、要素幅を横いっぱいに広げたくないボタンかつpaddingを付けたいので、display: inline-block;とする
    ※他にもinline-blockには要素が横に並ぶなどの特徴がある。
    https://saruwakakun.com/html-css/basic/display#section2
    */
    display: inline-block;
    padding: 1.5rem 4rem;
    border-radius: 10rem;
    /* 
    順不同で下記の4点を指定できる
    ・transition-duration：アニメーションにかかる時間
    ・transition-property：アニメーションさせるプロパティ
    ・transition-timing-function：アニメーションの変化の仕方
    ・transition-delay：アニメーション開始の遅れ時間
    ※時間に関するものは順番が関係あり。
    全てのプロパティのアニメーションを許可する場合は下記のようにallとする
    */
    transition: all 0.2s;
    /* 
    擬似要素内でposition:absolute;を使うのでrelativeにする
    */
    position: relative;
  }

  &:hover {
    transform: translateY(-0.3rem);
    /*
    box-shadow X方向の距離 Y方向の距離 ぼかし距離 影の色
    「ぼかし距離」は小さい(近い)ほどはっきり見える
    */
    box-shadow: 0 1rem 2rem rgba($color-black, 0.2);

    /* ボタンがシュリンってなるエフェクトの変化後の状態 */
    &::after {
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0;
    }
  }

  /* btnがクリックされている状態の場合はhoverしている時よりも、相対的に2px下に移動する */
  &:active {
    transform: translateY(-0.1rem);
    box-shadow: 0 0.5rem 1rem rgba($color-black, 0.2);
  }

  &--white {
    background-color: $color-white;
    color: $color-grey-dark;

    // これは下の&::afterの設定に含めても良いが、今回は色に関連するプロパティはこのクラスで指定する
    &::after {
      background-color: $color-white;
    }
  }

  /* ボタンがシュリンってなるエフェクトの初期状態 */
  /* 
  NOTE:
  ・before,afterなどの擬似要素の親要素は元々の要素の扱いになるので、width,heightは100%
  ・ここでは元々の要素を基準にposition:absolute;を使いたいので、元々の要素をrelativeにすることを忘れない。
  ・transition: all .4;　-> .4ではなく、.4sとする
  */
  &::after {
    /* 元々の要素とデザインが同じになるように諸々設定する */
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    /* 元々の要素を隠さないようにする */
    z-index: -1;

    /* 擬似要素にアニメーションをつける時も他と同様に、初期状態の方にtransitionプロパティを設定する */
    // これはこの要素がhoverする時に発動する
    transition: all 0.4s;
  }
  /* end: ボタンがシュリンってなるエフェクト */

  // ボタン出現時のエフェクト
  &--animated {
    /* 最後のプロパティはamimation-delay */
    animation: moveInBottom 0.5s ease-out 0.75s;

    /* このプロパティを指定することでkeyflameの0%の状態のcssがアニメーションが始まるまで適応される*/
    animation-fill-mode: backwards;
  }
}

.btn-text {
  &:link,
  &:visited {
    font-size: $default-font-size;
    color: $color-primary;
    display: inline-block;
    text-decoration: none;
    // ここでpx指定なのは、小さい値なので変化させたくない(?)意図があるらしい
    border-bottom: 1px solid $color-primary;
    padding: 3px;
    transition: all 0.2s;
  }

  &:hover {
    background-color: $color-primary;
    color: $color-white;
    box-shadow: 0 1rem 2rem rgba($color-black, 0.15);
    transform: translateY(-2px);
  }

  &:active {
    box-shadow: 0 0.5rem 1rem rgba($color-black, 0.15);
    transform: translateY(0);
  }
}
